//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:libSrc/json-20140107-sources.jar!org/json/JSONArray.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "JSONArray.h"
#include "java/io/IOException.h"
#include "java/io/StringWriter.h"
#include "java/io/Writer.h"
#include "java/lang/Boolean.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/reflect/Array.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "org/json/JSONException.h"
#include "org/json/JSONObject.h"
#include "org/json/JSONTokener.h"

@class JavaUtilArrayList;

@interface OrgJsonJSONArray () {
 @public
  JavaUtilArrayList *myArrayList_;
}
@end

J2OBJC_FIELD_SETTER(OrgJsonJSONArray, myArrayList_, JavaUtilArrayList *)

@implementation OrgJsonJSONArray

- (instancetype)init {
  OrgJsonJSONArray_init(self);
  return self;
}

- (instancetype)initWithOrgJsonJSONTokener:(OrgJsonJSONTokener *)x {
  OrgJsonJSONArray_initWithOrgJsonJSONTokener_(self, x);
  return self;
}

- (instancetype)initWithNSString:(NSString *)source {
  OrgJsonJSONArray_initWithNSString_(self, source);
  return self;
}

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  OrgJsonJSONArray_initWithJavaUtilCollection_(self, collection);
  return self;
}

- (instancetype)initWithId:(id)array {
  OrgJsonJSONArray_initWithId_(self, array);
  return self;
}

- (id)getWithInt:(jint)index {
  id object = [self optWithInt:index];
  if (object == nil) {
    @throw new_OrgJsonJSONException_initWithNSString_(JreStrcat("$I$", @"JSONArray[", index, @"] not found."));
  }
  return object;
}

- (jboolean)getBooleanWithInt:(jint)index {
  id object = [self getWithInt:index];
  if ([nil_chk(object) isEqual:JavaLangBoolean_get_FALSE__()] || ([object isKindOfClass:[NSString class]] && [((NSString *) check_class_cast(object, [NSString class])) equalsIgnoreCase:@"false"])) {
    return NO;
  }
  else if ([object isEqual:JavaLangBoolean_get_TRUE__()] || ([object isKindOfClass:[NSString class]] && [((NSString *) check_class_cast(object, [NSString class])) equalsIgnoreCase:@"true"])) {
    return YES;
  }
  @throw new_OrgJsonJSONException_initWithNSString_(JreStrcat("$I$", @"JSONArray[", index, @"] is not a boolean."));
}

- (jdouble)getDoubleWithInt:(jint)index {
  id object = [self getWithInt:index];
  @try {
    return [object isKindOfClass:[NSNumber class]] ? [((NSNumber *) nil_chk(((NSNumber *) check_class_cast(object, [NSNumber class])))) doubleValue] : JavaLangDouble_parseDoubleWithNSString_((NSString *) check_class_cast(object, [NSString class]));
  }
  @catch (JavaLangException *e) {
    @throw new_OrgJsonJSONException_initWithNSString_(JreStrcat("$I$", @"JSONArray[", index, @"] is not a number."));
  }
}

- (jint)getIntWithInt:(jint)index {
  id object = [self getWithInt:index];
  @try {
    return [object isKindOfClass:[NSNumber class]] ? [((NSNumber *) nil_chk(((NSNumber *) check_class_cast(object, [NSNumber class])))) intValue] : JavaLangInteger_parseIntWithNSString_((NSString *) check_class_cast(object, [NSString class]));
  }
  @catch (JavaLangException *e) {
    @throw new_OrgJsonJSONException_initWithNSString_(JreStrcat("$I$", @"JSONArray[", index, @"] is not a number."));
  }
}

- (OrgJsonJSONArray *)getJSONArrayWithInt:(jint)index {
  id object = [self getWithInt:index];
  if ([object isKindOfClass:[OrgJsonJSONArray class]]) {
    return (OrgJsonJSONArray *) check_class_cast(object, [OrgJsonJSONArray class]);
  }
  @throw new_OrgJsonJSONException_initWithNSString_(JreStrcat("$I$", @"JSONArray[", index, @"] is not a JSONArray."));
}

- (OrgJsonJSONObject *)getJSONObjectWithInt:(jint)index {
  id object = [self getWithInt:index];
  if ([object isKindOfClass:[OrgJsonJSONObject class]]) {
    return (OrgJsonJSONObject *) check_class_cast(object, [OrgJsonJSONObject class]);
  }
  @throw new_OrgJsonJSONException_initWithNSString_(JreStrcat("$I$", @"JSONArray[", index, @"] is not a JSONObject."));
}

- (jlong)getLongWithInt:(jint)index {
  id object = [self getWithInt:index];
  @try {
    return [object isKindOfClass:[NSNumber class]] ? [((NSNumber *) nil_chk(((NSNumber *) check_class_cast(object, [NSNumber class])))) longLongValue] : JavaLangLong_parseLongWithNSString_((NSString *) check_class_cast(object, [NSString class]));
  }
  @catch (JavaLangException *e) {
    @throw new_OrgJsonJSONException_initWithNSString_(JreStrcat("$I$", @"JSONArray[", index, @"] is not a number."));
  }
}

- (NSString *)getStringWithInt:(jint)index {
  id object = [self getWithInt:index];
  if ([object isKindOfClass:[NSString class]]) {
    return (NSString *) check_class_cast(object, [NSString class]);
  }
  @throw new_OrgJsonJSONException_initWithNSString_(JreStrcat("$I$", @"JSONArray[", index, @"] not a string."));
}

- (jboolean)isNullWithInt:(jint)index {
  return [nil_chk(OrgJsonJSONObject_get_NULL__()) isEqual:[self optWithInt:index]];
}

- (NSString *)joinWithNSString:(NSString *)separator {
  jint len = [self length];
  JavaLangStringBuffer *sb = new_JavaLangStringBuffer_init();
  for (jint i = 0; i < len; i += 1) {
    if (i > 0) {
      (void) [sb appendWithNSString:separator];
    }
    (void) [sb appendWithNSString:OrgJsonJSONObject_valueToStringWithId_([((JavaUtilArrayList *) nil_chk(self->myArrayList_)) getWithInt:i])];
  }
  return [sb description];
}

- (jint)length {
  return [((JavaUtilArrayList *) nil_chk(self->myArrayList_)) size];
}

- (id)optWithInt:(jint)index {
  return (index < 0 || index >= [self length]) ? nil : [((JavaUtilArrayList *) nil_chk(self->myArrayList_)) getWithInt:index];
}

- (jboolean)optBooleanWithInt:(jint)index {
  return [self optBooleanWithInt:index withBoolean:NO];
}

- (jboolean)optBooleanWithInt:(jint)index
                  withBoolean:(jboolean)defaultValue {
  @try {
    return [self getBooleanWithInt:index];
  }
  @catch (JavaLangException *e) {
    return defaultValue;
  }
}

- (jdouble)optDoubleWithInt:(jint)index {
  return [self optDoubleWithInt:index withDouble:JavaLangDouble_NaN];
}

- (jdouble)optDoubleWithInt:(jint)index
                 withDouble:(jdouble)defaultValue {
  @try {
    return [self getDoubleWithInt:index];
  }
  @catch (JavaLangException *e) {
    return defaultValue;
  }
}

- (jint)optIntWithInt:(jint)index {
  return [self optIntWithInt:index withInt:0];
}

- (jint)optIntWithInt:(jint)index
              withInt:(jint)defaultValue {
  @try {
    return [self getIntWithInt:index];
  }
  @catch (JavaLangException *e) {
    return defaultValue;
  }
}

- (OrgJsonJSONArray *)optJSONArrayWithInt:(jint)index {
  id o = [self optWithInt:index];
  return [o isKindOfClass:[OrgJsonJSONArray class]] ? (OrgJsonJSONArray *) check_class_cast(o, [OrgJsonJSONArray class]) : nil;
}

- (OrgJsonJSONObject *)optJSONObjectWithInt:(jint)index {
  id o = [self optWithInt:index];
  return [o isKindOfClass:[OrgJsonJSONObject class]] ? (OrgJsonJSONObject *) check_class_cast(o, [OrgJsonJSONObject class]) : nil;
}

- (jlong)optLongWithInt:(jint)index {
  return [self optLongWithInt:index withLong:0];
}

- (jlong)optLongWithInt:(jint)index
               withLong:(jlong)defaultValue {
  @try {
    return [self getLongWithInt:index];
  }
  @catch (JavaLangException *e) {
    return defaultValue;
  }
}

- (NSString *)optStringWithInt:(jint)index {
  return [self optStringWithInt:index withNSString:@""];
}

- (NSString *)optStringWithInt:(jint)index
                  withNSString:(NSString *)defaultValue {
  id object = [self optWithInt:index];
  return [nil_chk(OrgJsonJSONObject_get_NULL__()) isEqual:object] ? defaultValue : [nil_chk(object) description];
}

- (OrgJsonJSONArray *)putWithBoolean:(jboolean)value {
  (void) [self putWithId:value ? JavaLangBoolean_get_TRUE__() : JavaLangBoolean_get_FALSE__()];
  return self;
}

- (OrgJsonJSONArray *)putWithJavaUtilCollection:(id<JavaUtilCollection>)value {
  (void) [self putWithId:new_OrgJsonJSONArray_initWithJavaUtilCollection_(value)];
  return self;
}

- (OrgJsonJSONArray *)putWithDouble:(jdouble)value {
  JavaLangDouble *d = new_JavaLangDouble_initWithDouble_(value);
  OrgJsonJSONObject_testValidityWithId_(d);
  (void) [self putWithId:d];
  return self;
}

- (OrgJsonJSONArray *)putWithInt:(jint)value {
  (void) [self putWithId:new_JavaLangInteger_initWithInt_(value)];
  return self;
}

- (OrgJsonJSONArray *)putWithLong:(jlong)value {
  (void) [self putWithId:new_JavaLangLong_initWithLong_(value)];
  return self;
}

- (OrgJsonJSONArray *)putWithJavaUtilMap:(id<JavaUtilMap>)value {
  (void) [self putWithId:new_OrgJsonJSONObject_initWithJavaUtilMap_(value)];
  return self;
}

- (OrgJsonJSONArray *)putWithId:(id)value {
  [((JavaUtilArrayList *) nil_chk(self->myArrayList_)) addWithId:value];
  return self;
}

- (OrgJsonJSONArray *)putWithInt:(jint)index
                     withBoolean:(jboolean)value {
  (void) [self putWithInt:index withId:value ? JavaLangBoolean_get_TRUE__() : JavaLangBoolean_get_FALSE__()];
  return self;
}

- (OrgJsonJSONArray *)putWithInt:(jint)index
          withJavaUtilCollection:(id<JavaUtilCollection>)value {
  (void) [self putWithInt:index withId:new_OrgJsonJSONArray_initWithJavaUtilCollection_(value)];
  return self;
}

- (OrgJsonJSONArray *)putWithInt:(jint)index
                      withDouble:(jdouble)value {
  (void) [self putWithInt:index withId:new_JavaLangDouble_initWithDouble_(value)];
  return self;
}

- (OrgJsonJSONArray *)putWithInt:(jint)index
                         withInt:(jint)value {
  (void) [self putWithInt:index withId:new_JavaLangInteger_initWithInt_(value)];
  return self;
}

- (OrgJsonJSONArray *)putWithInt:(jint)index
                        withLong:(jlong)value {
  (void) [self putWithInt:index withId:new_JavaLangLong_initWithLong_(value)];
  return self;
}

- (OrgJsonJSONArray *)putWithInt:(jint)index
                 withJavaUtilMap:(id<JavaUtilMap>)value {
  (void) [self putWithInt:index withId:new_OrgJsonJSONObject_initWithJavaUtilMap_(value)];
  return self;
}

- (OrgJsonJSONArray *)putWithInt:(jint)index
                          withId:(id)value {
  OrgJsonJSONObject_testValidityWithId_(value);
  if (index < 0) {
    @throw new_OrgJsonJSONException_initWithNSString_(JreStrcat("$I$", @"JSONArray[", index, @"] not found."));
  }
  if (index < [self length]) {
    (void) [((JavaUtilArrayList *) nil_chk(self->myArrayList_)) setWithInt:index withId:value];
  }
  else {
    while (index != [self length]) {
      (void) [self putWithId:OrgJsonJSONObject_get_NULL__()];
    }
    (void) [self putWithId:value];
  }
  return self;
}

- (id)removeWithInt:(jint)index {
  id o = [self optWithInt:index];
  (void) [((JavaUtilArrayList *) nil_chk(self->myArrayList_)) removeWithInt:index];
  return o;
}

- (OrgJsonJSONObject *)toJSONObjectWithOrgJsonJSONArray:(OrgJsonJSONArray *)names {
  if (names == nil || [names length] == 0 || [self length] == 0) {
    return nil;
  }
  OrgJsonJSONObject *jo = new_OrgJsonJSONObject_init();
  for (jint i = 0; i < [((OrgJsonJSONArray *) nil_chk(names)) length]; i += 1) {
    (void) [jo putWithNSString:[names getStringWithInt:i] withId:[self optWithInt:i]];
  }
  return jo;
}

- (NSString *)description {
  @try {
    return [self toStringWithInt:0];
  }
  @catch (JavaLangException *e) {
    return nil;
  }
}

- (NSString *)toStringWithInt:(jint)indentFactor {
  JavaIoStringWriter *sw = new_JavaIoStringWriter_init();
  @synchronized([sw getBuffer]) {
    return [((JavaIoWriter *) nil_chk([self writeWithJavaIoWriter:sw withInt:indentFactor withInt:0])) description];
  }
}

- (JavaIoWriter *)writeWithJavaIoWriter:(JavaIoWriter *)writer {
  return [self writeWithJavaIoWriter:writer withInt:0 withInt:0];
}

- (JavaIoWriter *)writeWithJavaIoWriter:(JavaIoWriter *)writer
                                withInt:(jint)indentFactor
                                withInt:(jint)indent {
  @try {
    jboolean commanate = NO;
    jint length = [self length];
    [((JavaIoWriter *) nil_chk(writer)) writeWithInt:'['];
    if (length == 1) {
      (void) OrgJsonJSONObject_writeValueWithJavaIoWriter_withId_withInt_withInt_(writer, [((JavaUtilArrayList *) nil_chk(self->myArrayList_)) getWithInt:0], indentFactor, indent);
    }
    else if (length != 0) {
      jint newindent = indent + indentFactor;
      for (jint i = 0; i < length; i += 1) {
        if (commanate) {
          [writer writeWithInt:','];
        }
        if (indentFactor > 0) {
          [writer writeWithInt:0x000a];
        }
        OrgJsonJSONObject_indentWithJavaIoWriter_withInt_(writer, newindent);
        (void) OrgJsonJSONObject_writeValueWithJavaIoWriter_withId_withInt_withInt_(writer, [((JavaUtilArrayList *) nil_chk(self->myArrayList_)) getWithInt:i], indentFactor, newindent);
        commanate = YES;
      }
      if (indentFactor > 0) {
        [writer writeWithInt:0x000a];
      }
      OrgJsonJSONObject_indentWithJavaIoWriter_withInt_(writer, indent);
    }
    [writer writeWithInt:']'];
    return writer;
  }
  @catch (JavaIoIOException *e) {
    @throw new_OrgJsonJSONException_initWithJavaLangThrowable_(e);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "JSONArray", NULL, 0x1, NULL, NULL },
    { "initWithOrgJsonJSONTokener:", "JSONArray", NULL, 0x1, "Lorg.json.JSONException;", NULL },
    { "initWithNSString:", "JSONArray", NULL, 0x1, "Lorg.json.JSONException;", NULL },
    { "initWithJavaUtilCollection:", "JSONArray", NULL, 0x1, NULL, NULL },
    { "initWithId:", "JSONArray", NULL, 0x1, "Lorg.json.JSONException;", NULL },
    { "getWithInt:", "get", "Ljava.lang.Object;", 0x1, "Lorg.json.JSONException;", NULL },
    { "getBooleanWithInt:", "getBoolean", "Z", 0x1, "Lorg.json.JSONException;", NULL },
    { "getDoubleWithInt:", "getDouble", "D", 0x1, "Lorg.json.JSONException;", NULL },
    { "getIntWithInt:", "getInt", "I", 0x1, "Lorg.json.JSONException;", NULL },
    { "getJSONArrayWithInt:", "getJSONArray", "Lorg.json.JSONArray;", 0x1, "Lorg.json.JSONException;", NULL },
    { "getJSONObjectWithInt:", "getJSONObject", "Lorg.json.JSONObject;", 0x1, "Lorg.json.JSONException;", NULL },
    { "getLongWithInt:", "getLong", "J", 0x1, "Lorg.json.JSONException;", NULL },
    { "getStringWithInt:", "getString", "Ljava.lang.String;", 0x1, "Lorg.json.JSONException;", NULL },
    { "isNullWithInt:", "isNull", "Z", 0x1, NULL, NULL },
    { "joinWithNSString:", "join", "Ljava.lang.String;", 0x1, "Lorg.json.JSONException;", NULL },
    { "length", NULL, "I", 0x1, NULL, NULL },
    { "optWithInt:", "opt", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "optBooleanWithInt:", "optBoolean", "Z", 0x1, NULL, NULL },
    { "optBooleanWithInt:withBoolean:", "optBoolean", "Z", 0x1, NULL, NULL },
    { "optDoubleWithInt:", "optDouble", "D", 0x1, NULL, NULL },
    { "optDoubleWithInt:withDouble:", "optDouble", "D", 0x1, NULL, NULL },
    { "optIntWithInt:", "optInt", "I", 0x1, NULL, NULL },
    { "optIntWithInt:withInt:", "optInt", "I", 0x1, NULL, NULL },
    { "optJSONArrayWithInt:", "optJSONArray", "Lorg.json.JSONArray;", 0x1, NULL, NULL },
    { "optJSONObjectWithInt:", "optJSONObject", "Lorg.json.JSONObject;", 0x1, NULL, NULL },
    { "optLongWithInt:", "optLong", "J", 0x1, NULL, NULL },
    { "optLongWithInt:withLong:", "optLong", "J", 0x1, NULL, NULL },
    { "optStringWithInt:", "optString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "optStringWithInt:withNSString:", "optString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "putWithBoolean:", "put", "Lorg.json.JSONArray;", 0x1, NULL, NULL },
    { "putWithJavaUtilCollection:", "put", "Lorg.json.JSONArray;", 0x1, NULL, NULL },
    { "putWithDouble:", "put", "Lorg.json.JSONArray;", 0x1, "Lorg.json.JSONException;", NULL },
    { "putWithInt:", "put", "Lorg.json.JSONArray;", 0x1, NULL, NULL },
    { "putWithLong:", "put", "Lorg.json.JSONArray;", 0x1, NULL, NULL },
    { "putWithJavaUtilMap:", "put", "Lorg.json.JSONArray;", 0x1, NULL, NULL },
    { "putWithId:", "put", "Lorg.json.JSONArray;", 0x1, NULL, NULL },
    { "putWithInt:withBoolean:", "put", "Lorg.json.JSONArray;", 0x1, "Lorg.json.JSONException;", NULL },
    { "putWithInt:withJavaUtilCollection:", "put", "Lorg.json.JSONArray;", 0x1, "Lorg.json.JSONException;", NULL },
    { "putWithInt:withDouble:", "put", "Lorg.json.JSONArray;", 0x1, "Lorg.json.JSONException;", NULL },
    { "putWithInt:withInt:", "put", "Lorg.json.JSONArray;", 0x1, "Lorg.json.JSONException;", NULL },
    { "putWithInt:withLong:", "put", "Lorg.json.JSONArray;", 0x1, "Lorg.json.JSONException;", NULL },
    { "putWithInt:withJavaUtilMap:", "put", "Lorg.json.JSONArray;", 0x1, "Lorg.json.JSONException;", NULL },
    { "putWithInt:withId:", "put", "Lorg.json.JSONArray;", 0x1, "Lorg.json.JSONException;", NULL },
    { "removeWithInt:", "remove", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "toJSONObjectWithOrgJsonJSONArray:", "toJSONObject", "Lorg.json.JSONObject;", 0x1, "Lorg.json.JSONException;", NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toStringWithInt:", "toString", "Ljava.lang.String;", 0x1, "Lorg.json.JSONException;", NULL },
    { "writeWithJavaIoWriter:", "write", "Ljava.io.Writer;", 0x1, "Lorg.json.JSONException;", NULL },
    { "writeWithJavaIoWriter:withInt:withInt:", "write", "Ljava.io.Writer;", 0x0, "Lorg.json.JSONException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "myArrayList_", NULL, 0x12, "Ljava.util.ArrayList;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgJsonJSONArray = { 2, "JSONArray", "org.json", NULL, 0x1, 49, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgJsonJSONArray;
}

@end

void OrgJsonJSONArray_init(OrgJsonJSONArray *self) {
  (void) NSObject_init(self);
  self->myArrayList_ = new_JavaUtilArrayList_init();
}

OrgJsonJSONArray *new_OrgJsonJSONArray_init() {
  OrgJsonJSONArray *self = [OrgJsonJSONArray alloc];
  OrgJsonJSONArray_init(self);
  return self;
}

void OrgJsonJSONArray_initWithOrgJsonJSONTokener_(OrgJsonJSONArray *self, OrgJsonJSONTokener *x) {
  (void) OrgJsonJSONArray_init(self);
  if ([((OrgJsonJSONTokener *) nil_chk(x)) nextClean] != '[') {
    @throw [x syntaxErrorWithNSString:@"A JSONArray text must start with '['"];
  }
  if ([x nextClean] != ']') {
    [x back];
    for (; ; ) {
      if ([x nextClean] == ',') {
        [x back];
        [((JavaUtilArrayList *) nil_chk(self->myArrayList_)) addWithId:OrgJsonJSONObject_get_NULL__()];
      }
      else {
        [x back];
        [((JavaUtilArrayList *) nil_chk(self->myArrayList_)) addWithId:[x nextValue]];
      }
      switch ([x nextClean]) {
        case ',':
        if ([x nextClean] == ']') {
          return;
        }
        [x back];
        break;
        case ']':
        return;
        default:
        @throw [x syntaxErrorWithNSString:@"Expected a ',' or ']'"];
      }
    }
  }
}

OrgJsonJSONArray *new_OrgJsonJSONArray_initWithOrgJsonJSONTokener_(OrgJsonJSONTokener *x) {
  OrgJsonJSONArray *self = [OrgJsonJSONArray alloc];
  OrgJsonJSONArray_initWithOrgJsonJSONTokener_(self, x);
  return self;
}

void OrgJsonJSONArray_initWithNSString_(OrgJsonJSONArray *self, NSString *source) {
  (void) OrgJsonJSONArray_initWithOrgJsonJSONTokener_(self, new_OrgJsonJSONTokener_initWithNSString_(source));
}

OrgJsonJSONArray *new_OrgJsonJSONArray_initWithNSString_(NSString *source) {
  OrgJsonJSONArray *self = [OrgJsonJSONArray alloc];
  OrgJsonJSONArray_initWithNSString_(self, source);
  return self;
}

void OrgJsonJSONArray_initWithJavaUtilCollection_(OrgJsonJSONArray *self, id<JavaUtilCollection> collection) {
  (void) NSObject_init(self);
  self->myArrayList_ = new_JavaUtilArrayList_init();
  if (collection != nil) {
    id<JavaUtilIterator> iter = [collection iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
      [self->myArrayList_ addWithId:OrgJsonJSONObject_wrapWithId_([iter next])];
    }
  }
}

OrgJsonJSONArray *new_OrgJsonJSONArray_initWithJavaUtilCollection_(id<JavaUtilCollection> collection) {
  OrgJsonJSONArray *self = [OrgJsonJSONArray alloc];
  OrgJsonJSONArray_initWithJavaUtilCollection_(self, collection);
  return self;
}

void OrgJsonJSONArray_initWithId_(OrgJsonJSONArray *self, id array) {
  (void) OrgJsonJSONArray_init(self);
  if ([[nil_chk(array) getClass] isArray]) {
    jint length = JavaLangReflectArray_getLengthWithId_(array);
    for (jint i = 0; i < length; i += 1) {
      (void) [self putWithId:OrgJsonJSONObject_wrapWithId_(JavaLangReflectArray_getWithId_withInt_(array, i))];
    }
  }
  else {
    @throw new_OrgJsonJSONException_initWithNSString_(@"JSONArray initial value should be a string or collection or array.");
  }
}

OrgJsonJSONArray *new_OrgJsonJSONArray_initWithId_(id array) {
  OrgJsonJSONArray *self = [OrgJsonJSONArray alloc];
  OrgJsonJSONArray_initWithId_(self, array);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsonJSONArray)
