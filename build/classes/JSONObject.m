//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:libSrc/json-20140107-sources.jar!org/json/JSONObject.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "JSONObject.h"
#include "java/io/IOException.h"
#include "java/io/StringWriter.h"
#include "java/io/Writer.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/Character.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Package.h"
#include "java/lang/Short.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/Thread.h"
#include "java/lang/reflect/Field.h"
#include "java/lang/reflect/Method.h"
#include "java/lang/reflect/Modifier.h"
#include "java/util/Collection.h"
#include "java/util/Enumeration.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/ResourceBundle.h"
#include "java/util/Set.h"
#include "org/json/JSONArray.h"
#include "org/json/JSONException.h"
#include "org/json/JSONString.h"
#include "org/json/JSONTokener.h"

@class OrgJsonJSONObject;
@class OrgJsonJSONObject_Null;
@protocol JavaUtilMap;

@interface OrgJsonJSONObject () {
 @public
  id<JavaUtilMap> map_;
}

- (void)populateMapWithId:(id)bean;
@end

J2OBJC_FIELD_SETTER(OrgJsonJSONObject, map_, id<JavaUtilMap>)

__attribute__((unused)) static void OrgJsonJSONObject_populateMapWithId_(OrgJsonJSONObject *self, id bean);

@interface OrgJsonJSONObject_Null ()

- (instancetype)init;
@end

__attribute__((unused)) static void OrgJsonJSONObject_Null_init(OrgJsonJSONObject_Null *self);

__attribute__((unused)) static OrgJsonJSONObject_Null *new_OrgJsonJSONObject_Null_init() NS_RETURNS_RETAINED;

J2OBJC_INITIALIZED_DEFN(OrgJsonJSONObject)

id OrgJsonJSONObject_NULL__;

@implementation OrgJsonJSONObject

- (instancetype)init {
  OrgJsonJSONObject_init(self);
  return self;
}

- (instancetype)initWithOrgJsonJSONObject:(OrgJsonJSONObject *)jo
                        withNSStringArray:(IOSObjectArray *)names {
  OrgJsonJSONObject_initWithOrgJsonJSONObject_withNSStringArray_(self, jo, names);
  return self;
}

- (instancetype)initWithOrgJsonJSONTokener:(OrgJsonJSONTokener *)x {
  OrgJsonJSONObject_initWithOrgJsonJSONTokener_(self, x);
  return self;
}

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)map {
  OrgJsonJSONObject_initWithJavaUtilMap_(self, map);
  return self;
}

- (instancetype)initWithId:(id)bean {
  OrgJsonJSONObject_initWithId_(self, bean);
  return self;
}

- (instancetype)initWithId:(id)object
         withNSStringArray:(IOSObjectArray *)names {
  OrgJsonJSONObject_initWithId_withNSStringArray_(self, object, names);
  return self;
}

- (instancetype)initWithNSString:(NSString *)source {
  OrgJsonJSONObject_initWithNSString_(self, source);
  return self;
}

- (instancetype)initWithNSString:(NSString *)baseName
              withJavaUtilLocale:(JavaUtilLocale *)locale {
  OrgJsonJSONObject_initWithNSString_withJavaUtilLocale_(self, baseName, locale);
  return self;
}

- (OrgJsonJSONObject *)accumulateWithNSString:(NSString *)key
                                       withId:(id)value {
  OrgJsonJSONObject_testValidityWithId_(value);
  id object = [self optWithNSString:key];
  if (object == nil) {
    (void) [self putWithNSString:key withId:[value isKindOfClass:[OrgJsonJSONArray class]] ? [new_OrgJsonJSONArray_init() putWithId:value] : value];
  }
  else if ([object isKindOfClass:[OrgJsonJSONArray class]]) {
    (void) [((OrgJsonJSONArray *) check_class_cast(object, [OrgJsonJSONArray class])) putWithId:value];
  }
  else {
    (void) [self putWithNSString:key withId:[((OrgJsonJSONArray *) nil_chk([new_OrgJsonJSONArray_init() putWithId:object])) putWithId:value]];
  }
  return self;
}

- (OrgJsonJSONObject *)appendWithNSString:(NSString *)key
                                   withId:(id)value {
  OrgJsonJSONObject_testValidityWithId_(value);
  id object = [self optWithNSString:key];
  if (object == nil) {
    (void) [self putWithNSString:key withId:[new_OrgJsonJSONArray_init() putWithId:value]];
  }
  else if ([object isKindOfClass:[OrgJsonJSONArray class]]) {
    (void) [self putWithNSString:key withId:[((OrgJsonJSONArray *) check_class_cast(object, [OrgJsonJSONArray class])) putWithId:value]];
  }
  else {
    @throw new_OrgJsonJSONException_initWithNSString_(JreStrcat("$$$", @"JSONObject[", key, @"] is not a JSONArray."));
  }
  return self;
}

+ (NSString *)doubleToStringWithDouble:(jdouble)d {
  return OrgJsonJSONObject_doubleToStringWithDouble_(d);
}

- (id)getWithNSString:(NSString *)key {
  if (key == nil) {
    @throw new_OrgJsonJSONException_initWithNSString_(@"Null key.");
  }
  id object = [self optWithNSString:key];
  if (object == nil) {
    @throw new_OrgJsonJSONException_initWithNSString_(JreStrcat("$$$", @"JSONObject[", OrgJsonJSONObject_quoteWithNSString_(key), @"] not found."));
  }
  return object;
}

- (jboolean)getBooleanWithNSString:(NSString *)key {
  id object = [self getWithNSString:key];
  if ([nil_chk(object) isEqual:JavaLangBoolean_get_FALSE__()] || ([object isKindOfClass:[NSString class]] && [((NSString *) check_class_cast(object, [NSString class])) equalsIgnoreCase:@"false"])) {
    return NO;
  }
  else if ([object isEqual:JavaLangBoolean_get_TRUE__()] || ([object isKindOfClass:[NSString class]] && [((NSString *) check_class_cast(object, [NSString class])) equalsIgnoreCase:@"true"])) {
    return YES;
  }
  @throw new_OrgJsonJSONException_initWithNSString_(JreStrcat("$$$", @"JSONObject[", OrgJsonJSONObject_quoteWithNSString_(key), @"] is not a Boolean."));
}

- (jdouble)getDoubleWithNSString:(NSString *)key {
  id object = [self getWithNSString:key];
  @try {
    return [object isKindOfClass:[NSNumber class]] ? [((NSNumber *) nil_chk(((NSNumber *) check_class_cast(object, [NSNumber class])))) doubleValue] : JavaLangDouble_parseDoubleWithNSString_((NSString *) check_class_cast(object, [NSString class]));
  }
  @catch (JavaLangException *e) {
    @throw new_OrgJsonJSONException_initWithNSString_(JreStrcat("$$$", @"JSONObject[", OrgJsonJSONObject_quoteWithNSString_(key), @"] is not a number."));
  }
}

- (jint)getIntWithNSString:(NSString *)key {
  id object = [self getWithNSString:key];
  @try {
    return [object isKindOfClass:[NSNumber class]] ? [((NSNumber *) nil_chk(((NSNumber *) check_class_cast(object, [NSNumber class])))) intValue] : JavaLangInteger_parseIntWithNSString_((NSString *) check_class_cast(object, [NSString class]));
  }
  @catch (JavaLangException *e) {
    @throw new_OrgJsonJSONException_initWithNSString_(JreStrcat("$$$", @"JSONObject[", OrgJsonJSONObject_quoteWithNSString_(key), @"] is not an int."));
  }
}

- (OrgJsonJSONArray *)getJSONArrayWithNSString:(NSString *)key {
  id object = [self getWithNSString:key];
  if ([object isKindOfClass:[OrgJsonJSONArray class]]) {
    return (OrgJsonJSONArray *) check_class_cast(object, [OrgJsonJSONArray class]);
  }
  @throw new_OrgJsonJSONException_initWithNSString_(JreStrcat("$$$", @"JSONObject[", OrgJsonJSONObject_quoteWithNSString_(key), @"] is not a JSONArray."));
}

- (OrgJsonJSONObject *)getJSONObjectWithNSString:(NSString *)key {
  id object = [self getWithNSString:key];
  if ([object isKindOfClass:[OrgJsonJSONObject class]]) {
    return (OrgJsonJSONObject *) check_class_cast(object, [OrgJsonJSONObject class]);
  }
  @throw new_OrgJsonJSONException_initWithNSString_(JreStrcat("$$$", @"JSONObject[", OrgJsonJSONObject_quoteWithNSString_(key), @"] is not a JSONObject."));
}

- (jlong)getLongWithNSString:(NSString *)key {
  id object = [self getWithNSString:key];
  @try {
    return [object isKindOfClass:[NSNumber class]] ? [((NSNumber *) nil_chk(((NSNumber *) check_class_cast(object, [NSNumber class])))) longLongValue] : JavaLangLong_parseLongWithNSString_((NSString *) check_class_cast(object, [NSString class]));
  }
  @catch (JavaLangException *e) {
    @throw new_OrgJsonJSONException_initWithNSString_(JreStrcat("$$$", @"JSONObject[", OrgJsonJSONObject_quoteWithNSString_(key), @"] is not a long."));
  }
}

+ (IOSObjectArray *)getNamesWithOrgJsonJSONObject:(OrgJsonJSONObject *)jo {
  return OrgJsonJSONObject_getNamesWithOrgJsonJSONObject_(jo);
}

+ (IOSObjectArray *)getNamesWithId:(id)object {
  return OrgJsonJSONObject_getNamesWithId_(object);
}

- (NSString *)getStringWithNSString:(NSString *)key {
  id object = [self getWithNSString:key];
  if ([object isKindOfClass:[NSString class]]) {
    return (NSString *) check_class_cast(object, [NSString class]);
  }
  @throw new_OrgJsonJSONException_initWithNSString_(JreStrcat("$$$", @"JSONObject[", OrgJsonJSONObject_quoteWithNSString_(key), @"] not a string."));
}

- (jboolean)hasWithNSString:(NSString *)key {
  return [((id<JavaUtilMap>) nil_chk(self->map_)) containsKeyWithId:key];
}

- (OrgJsonJSONObject *)incrementWithNSString:(NSString *)key {
  id value = [self optWithNSString:key];
  if (value == nil) {
    (void) [self putWithNSString:key withInt:1];
  }
  else if ([value isKindOfClass:[JavaLangInteger class]]) {
    (void) [self putWithNSString:key withInt:[((JavaLangInteger *) check_class_cast(value, [JavaLangInteger class])) intValue] + 1];
  }
  else if ([value isKindOfClass:[JavaLangLong class]]) {
    (void) [self putWithNSString:key withLong:[((JavaLangLong *) check_class_cast(value, [JavaLangLong class])) longLongValue] + 1];
  }
  else if ([value isKindOfClass:[JavaLangDouble class]]) {
    (void) [self putWithNSString:key withDouble:[((JavaLangDouble *) check_class_cast(value, [JavaLangDouble class])) doubleValue] + 1];
  }
  else if ([value isKindOfClass:[JavaLangFloat class]]) {
    (void) [self putWithNSString:key withDouble:[((JavaLangFloat *) check_class_cast(value, [JavaLangFloat class])) floatValue] + 1];
  }
  else {
    @throw new_OrgJsonJSONException_initWithNSString_(JreStrcat("$$$", @"Unable to increment [", OrgJsonJSONObject_quoteWithNSString_(key), @"]."));
  }
  return self;
}

- (jboolean)isNullWithNSString:(NSString *)key {
  return [nil_chk(OrgJsonJSONObject_NULL__) isEqual:[self optWithNSString:key]];
}

- (id<JavaUtilIterator>)keys {
  return [((id<JavaUtilSet>) nil_chk([self keySet])) iterator];
}

- (id<JavaUtilSet>)keySet {
  return [((id<JavaUtilMap>) nil_chk(self->map_)) keySet];
}

- (jint)length {
  return [((id<JavaUtilMap>) nil_chk(self->map_)) size];
}

- (OrgJsonJSONArray *)names {
  OrgJsonJSONArray *ja = new_OrgJsonJSONArray_init();
  id<JavaUtilIterator> keys = [self keys];
  while ([((id<JavaUtilIterator>) nil_chk(keys)) hasNext]) {
    (void) [ja putWithId:[keys next]];
  }
  return [ja length] == 0 ? nil : ja;
}

+ (NSString *)numberToStringWithNSNumber:(NSNumber *)number {
  return OrgJsonJSONObject_numberToStringWithNSNumber_(number);
}

- (id)optWithNSString:(NSString *)key {
  return key == nil ? nil : [((id<JavaUtilMap>) nil_chk(self->map_)) getWithId:key];
}

- (jboolean)optBooleanWithNSString:(NSString *)key {
  return [self optBooleanWithNSString:key withBoolean:NO];
}

- (jboolean)optBooleanWithNSString:(NSString *)key
                       withBoolean:(jboolean)defaultValue {
  @try {
    return [self getBooleanWithNSString:key];
  }
  @catch (JavaLangException *e) {
    return defaultValue;
  }
}

- (jdouble)optDoubleWithNSString:(NSString *)key {
  return [self optDoubleWithNSString:key withDouble:JavaLangDouble_NaN];
}

- (jdouble)optDoubleWithNSString:(NSString *)key
                      withDouble:(jdouble)defaultValue {
  @try {
    return [self getDoubleWithNSString:key];
  }
  @catch (JavaLangException *e) {
    return defaultValue;
  }
}

- (jint)optIntWithNSString:(NSString *)key {
  return [self optIntWithNSString:key withInt:0];
}

- (jint)optIntWithNSString:(NSString *)key
                   withInt:(jint)defaultValue {
  @try {
    return [self getIntWithNSString:key];
  }
  @catch (JavaLangException *e) {
    return defaultValue;
  }
}

- (OrgJsonJSONArray *)optJSONArrayWithNSString:(NSString *)key {
  id o = [self optWithNSString:key];
  return [o isKindOfClass:[OrgJsonJSONArray class]] ? (OrgJsonJSONArray *) check_class_cast(o, [OrgJsonJSONArray class]) : nil;
}

- (OrgJsonJSONObject *)optJSONObjectWithNSString:(NSString *)key {
  id object = [self optWithNSString:key];
  return [object isKindOfClass:[OrgJsonJSONObject class]] ? (OrgJsonJSONObject *) check_class_cast(object, [OrgJsonJSONObject class]) : nil;
}

- (jlong)optLongWithNSString:(NSString *)key {
  return [self optLongWithNSString:key withLong:0];
}

- (jlong)optLongWithNSString:(NSString *)key
                    withLong:(jlong)defaultValue {
  @try {
    return [self getLongWithNSString:key];
  }
  @catch (JavaLangException *e) {
    return defaultValue;
  }
}

- (NSString *)optStringWithNSString:(NSString *)key {
  return [self optStringWithNSString:key withNSString:@""];
}

- (NSString *)optStringWithNSString:(NSString *)key
                       withNSString:(NSString *)defaultValue {
  id object = [self optWithNSString:key];
  return [nil_chk(OrgJsonJSONObject_NULL__) isEqual:object] ? defaultValue : [nil_chk(object) description];
}

- (void)populateMapWithId:(id)bean {
  OrgJsonJSONObject_populateMapWithId_(self, bean);
}

- (OrgJsonJSONObject *)putWithNSString:(NSString *)key
                           withBoolean:(jboolean)value {
  (void) [self putWithNSString:key withId:value ? JavaLangBoolean_get_TRUE__() : JavaLangBoolean_get_FALSE__()];
  return self;
}

- (OrgJsonJSONObject *)putWithNSString:(NSString *)key
                withJavaUtilCollection:(id<JavaUtilCollection>)value {
  (void) [self putWithNSString:key withId:new_OrgJsonJSONArray_initWithJavaUtilCollection_(value)];
  return self;
}

- (OrgJsonJSONObject *)putWithNSString:(NSString *)key
                            withDouble:(jdouble)value {
  (void) [self putWithNSString:key withId:new_JavaLangDouble_initWithDouble_(value)];
  return self;
}

- (OrgJsonJSONObject *)putWithNSString:(NSString *)key
                               withInt:(jint)value {
  (void) [self putWithNSString:key withId:new_JavaLangInteger_initWithInt_(value)];
  return self;
}

- (OrgJsonJSONObject *)putWithNSString:(NSString *)key
                              withLong:(jlong)value {
  (void) [self putWithNSString:key withId:new_JavaLangLong_initWithLong_(value)];
  return self;
}

- (OrgJsonJSONObject *)putWithNSString:(NSString *)key
                       withJavaUtilMap:(id<JavaUtilMap>)value {
  (void) [self putWithNSString:key withId:new_OrgJsonJSONObject_initWithJavaUtilMap_(value)];
  return self;
}

- (OrgJsonJSONObject *)putWithNSString:(NSString *)key
                                withId:(id)value {
  if (key == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"Null key.");
  }
  if (value != nil) {
    OrgJsonJSONObject_testValidityWithId_(value);
    (void) [((id<JavaUtilMap>) nil_chk(self->map_)) putWithId:key withId:value];
  }
  else {
    (void) [self removeWithNSString:key];
  }
  return self;
}

- (OrgJsonJSONObject *)putOnceWithNSString:(NSString *)key
                                    withId:(id)value {
  if (key != nil && value != nil) {
    if ([self optWithNSString:key] != nil) {
      @throw new_OrgJsonJSONException_initWithNSString_(JreStrcat("$$C", @"Duplicate key \"", key, '"'));
    }
    (void) [self putWithNSString:key withId:value];
  }
  return self;
}

- (OrgJsonJSONObject *)putOptWithNSString:(NSString *)key
                                   withId:(id)value {
  if (key != nil && value != nil) {
    (void) [self putWithNSString:key withId:value];
  }
  return self;
}

+ (NSString *)quoteWithNSString:(NSString *)string {
  return OrgJsonJSONObject_quoteWithNSString_(string);
}

+ (JavaIoWriter *)quoteWithNSString:(NSString *)string
                   withJavaIoWriter:(JavaIoWriter *)w {
  return OrgJsonJSONObject_quoteWithNSString_withJavaIoWriter_(string, w);
}

- (id)removeWithNSString:(NSString *)key {
  return [((id<JavaUtilMap>) nil_chk(self->map_)) removeWithId:key];
}

+ (id)stringToValueWithNSString:(NSString *)string {
  return OrgJsonJSONObject_stringToValueWithNSString_(string);
}

+ (void)testValidityWithId:(id)o {
  OrgJsonJSONObject_testValidityWithId_(o);
}

- (OrgJsonJSONArray *)toJSONArrayWithOrgJsonJSONArray:(OrgJsonJSONArray *)names {
  if (names == nil || [names length] == 0) {
    return nil;
  }
  OrgJsonJSONArray *ja = new_OrgJsonJSONArray_init();
  for (jint i = 0; i < [((OrgJsonJSONArray *) nil_chk(names)) length]; i += 1) {
    (void) [ja putWithId:[self optWithNSString:[names getStringWithInt:i]]];
  }
  return ja;
}

- (NSString *)description {
  @try {
    return [self toStringWithInt:0];
  }
  @catch (JavaLangException *e) {
    return nil;
  }
}

- (NSString *)toStringWithInt:(jint)indentFactor {
  JavaIoStringWriter *w = new_JavaIoStringWriter_init();
  @synchronized([w getBuffer]) {
    return [((JavaIoWriter *) nil_chk([self writeWithJavaIoWriter:w withInt:indentFactor withInt:0])) description];
  }
}

+ (NSString *)valueToStringWithId:(id)value {
  return OrgJsonJSONObject_valueToStringWithId_(value);
}

+ (id)wrapWithId:(id)object {
  return OrgJsonJSONObject_wrapWithId_(object);
}

- (JavaIoWriter *)writeWithJavaIoWriter:(JavaIoWriter *)writer {
  return [self writeWithJavaIoWriter:writer withInt:0 withInt:0];
}

+ (JavaIoWriter *)writeValueWithJavaIoWriter:(JavaIoWriter *)writer
                                      withId:(id)value
                                     withInt:(jint)indentFactor
                                     withInt:(jint)indent {
  return OrgJsonJSONObject_writeValueWithJavaIoWriter_withId_withInt_withInt_(writer, value, indentFactor, indent);
}

+ (void)indentWithJavaIoWriter:(JavaIoWriter *)writer
                       withInt:(jint)indent {
  OrgJsonJSONObject_indentWithJavaIoWriter_withInt_(writer, indent);
}

- (JavaIoWriter *)writeWithJavaIoWriter:(JavaIoWriter *)writer
                                withInt:(jint)indentFactor
                                withInt:(jint)indent {
  @try {
    jboolean commanate = NO;
    jint length = [self length];
    id<JavaUtilIterator> keys = [self keys];
    [((JavaIoWriter *) nil_chk(writer)) writeWithInt:'{'];
    if (length == 1) {
      id key = [((id<JavaUtilIterator>) nil_chk(keys)) next];
      [writer writeWithNSString:OrgJsonJSONObject_quoteWithNSString_([nil_chk(key) description])];
      [writer writeWithInt:':'];
      if (indentFactor > 0) {
        [writer writeWithInt:' '];
      }
      (void) OrgJsonJSONObject_writeValueWithJavaIoWriter_withId_withInt_withInt_(writer, [((id<JavaUtilMap>) nil_chk(self->map_)) getWithId:key], indentFactor, indent);
    }
    else if (length != 0) {
      jint newindent = indent + indentFactor;
      while ([((id<JavaUtilIterator>) nil_chk(keys)) hasNext]) {
        id key = [keys next];
        if (commanate) {
          [writer writeWithInt:','];
        }
        if (indentFactor > 0) {
          [writer writeWithInt:0x000a];
        }
        OrgJsonJSONObject_indentWithJavaIoWriter_withInt_(writer, newindent);
        [writer writeWithNSString:OrgJsonJSONObject_quoteWithNSString_([nil_chk(key) description])];
        [writer writeWithInt:':'];
        if (indentFactor > 0) {
          [writer writeWithInt:' '];
        }
        (void) OrgJsonJSONObject_writeValueWithJavaIoWriter_withId_withInt_withInt_(writer, [((id<JavaUtilMap>) nil_chk(self->map_)) getWithId:key], indentFactor, newindent);
        commanate = YES;
      }
      if (indentFactor > 0) {
        [writer writeWithInt:0x000a];
      }
      OrgJsonJSONObject_indentWithJavaIoWriter_withInt_(writer, indent);
    }
    [writer writeWithInt:'}'];
    return writer;
  }
  @catch (JavaIoIOException *exception) {
    @throw new_OrgJsonJSONException_initWithJavaLangThrowable_(exception);
  }
}

+ (void)initialize {
  if (self == [OrgJsonJSONObject class]) {
    OrgJsonJSONObject_NULL__ = new_OrgJsonJSONObject_Null_init();
    J2OBJC_SET_INITIALIZED(OrgJsonJSONObject)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "JSONObject", NULL, 0x1, NULL, NULL },
    { "initWithOrgJsonJSONObject:withNSStringArray:", "JSONObject", NULL, 0x1, NULL, NULL },
    { "initWithOrgJsonJSONTokener:", "JSONObject", NULL, 0x1, "Lorg.json.JSONException;", NULL },
    { "initWithJavaUtilMap:", "JSONObject", NULL, 0x1, NULL, NULL },
    { "initWithId:", "JSONObject", NULL, 0x1, NULL, NULL },
    { "initWithId:withNSStringArray:", "JSONObject", NULL, 0x1, NULL, NULL },
    { "initWithNSString:", "JSONObject", NULL, 0x1, "Lorg.json.JSONException;", NULL },
    { "initWithNSString:withJavaUtilLocale:", "JSONObject", NULL, 0x1, "Lorg.json.JSONException;", NULL },
    { "accumulateWithNSString:withId:", "accumulate", "Lorg.json.JSONObject;", 0x1, "Lorg.json.JSONException;", NULL },
    { "appendWithNSString:withId:", "append", "Lorg.json.JSONObject;", 0x1, "Lorg.json.JSONException;", NULL },
    { "doubleToStringWithDouble:", "doubleToString", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "getWithNSString:", "get", "Ljava.lang.Object;", 0x1, "Lorg.json.JSONException;", NULL },
    { "getBooleanWithNSString:", "getBoolean", "Z", 0x1, "Lorg.json.JSONException;", NULL },
    { "getDoubleWithNSString:", "getDouble", "D", 0x1, "Lorg.json.JSONException;", NULL },
    { "getIntWithNSString:", "getInt", "I", 0x1, "Lorg.json.JSONException;", NULL },
    { "getJSONArrayWithNSString:", "getJSONArray", "Lorg.json.JSONArray;", 0x1, "Lorg.json.JSONException;", NULL },
    { "getJSONObjectWithNSString:", "getJSONObject", "Lorg.json.JSONObject;", 0x1, "Lorg.json.JSONException;", NULL },
    { "getLongWithNSString:", "getLong", "J", 0x1, "Lorg.json.JSONException;", NULL },
    { "getNamesWithOrgJsonJSONObject:", "getNames", "[Ljava.lang.String;", 0x9, NULL, NULL },
    { "getNamesWithId:", "getNames", "[Ljava.lang.String;", 0x9, NULL, NULL },
    { "getStringWithNSString:", "getString", "Ljava.lang.String;", 0x1, "Lorg.json.JSONException;", NULL },
    { "hasWithNSString:", "has", "Z", 0x1, NULL, NULL },
    { "incrementWithNSString:", "increment", "Lorg.json.JSONObject;", 0x1, "Lorg.json.JSONException;", NULL },
    { "isNullWithNSString:", "isNull", "Z", 0x1, NULL, NULL },
    { "keys", NULL, "Ljava.util.Iterator;", 0x1, NULL, NULL },
    { "keySet", NULL, "Ljava.util.Set;", 0x1, NULL, NULL },
    { "length", NULL, "I", 0x1, NULL, NULL },
    { "names", NULL, "Lorg.json.JSONArray;", 0x1, NULL, NULL },
    { "numberToStringWithNSNumber:", "numberToString", "Ljava.lang.String;", 0x9, "Lorg.json.JSONException;", NULL },
    { "optWithNSString:", "opt", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "optBooleanWithNSString:", "optBoolean", "Z", 0x1, NULL, NULL },
    { "optBooleanWithNSString:withBoolean:", "optBoolean", "Z", 0x1, NULL, NULL },
    { "optDoubleWithNSString:", "optDouble", "D", 0x1, NULL, NULL },
    { "optDoubleWithNSString:withDouble:", "optDouble", "D", 0x1, NULL, NULL },
    { "optIntWithNSString:", "optInt", "I", 0x1, NULL, NULL },
    { "optIntWithNSString:withInt:", "optInt", "I", 0x1, NULL, NULL },
    { "optJSONArrayWithNSString:", "optJSONArray", "Lorg.json.JSONArray;", 0x1, NULL, NULL },
    { "optJSONObjectWithNSString:", "optJSONObject", "Lorg.json.JSONObject;", 0x1, NULL, NULL },
    { "optLongWithNSString:", "optLong", "J", 0x1, NULL, NULL },
    { "optLongWithNSString:withLong:", "optLong", "J", 0x1, NULL, NULL },
    { "optStringWithNSString:", "optString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "optStringWithNSString:withNSString:", "optString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "populateMapWithId:", "populateMap", "V", 0x2, NULL, NULL },
    { "putWithNSString:withBoolean:", "put", "Lorg.json.JSONObject;", 0x1, "Lorg.json.JSONException;", NULL },
    { "putWithNSString:withJavaUtilCollection:", "put", "Lorg.json.JSONObject;", 0x1, "Lorg.json.JSONException;", NULL },
    { "putWithNSString:withDouble:", "put", "Lorg.json.JSONObject;", 0x1, "Lorg.json.JSONException;", NULL },
    { "putWithNSString:withInt:", "put", "Lorg.json.JSONObject;", 0x1, "Lorg.json.JSONException;", NULL },
    { "putWithNSString:withLong:", "put", "Lorg.json.JSONObject;", 0x1, "Lorg.json.JSONException;", NULL },
    { "putWithNSString:withJavaUtilMap:", "put", "Lorg.json.JSONObject;", 0x1, "Lorg.json.JSONException;", NULL },
    { "putWithNSString:withId:", "put", "Lorg.json.JSONObject;", 0x1, "Lorg.json.JSONException;", NULL },
    { "putOnceWithNSString:withId:", "putOnce", "Lorg.json.JSONObject;", 0x1, "Lorg.json.JSONException;", NULL },
    { "putOptWithNSString:withId:", "putOpt", "Lorg.json.JSONObject;", 0x1, "Lorg.json.JSONException;", NULL },
    { "quoteWithNSString:", "quote", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "quoteWithNSString:withJavaIoWriter:", "quote", "Ljava.io.Writer;", 0x9, "Ljava.io.IOException;", NULL },
    { "removeWithNSString:", "remove", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "stringToValueWithNSString:", "stringToValue", "Ljava.lang.Object;", 0x9, NULL, NULL },
    { "testValidityWithId:", "testValidity", "V", 0x9, "Lorg.json.JSONException;", NULL },
    { "toJSONArrayWithOrgJsonJSONArray:", "toJSONArray", "Lorg.json.JSONArray;", 0x1, "Lorg.json.JSONException;", NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toStringWithInt:", "toString", "Ljava.lang.String;", 0x1, "Lorg.json.JSONException;", NULL },
    { "valueToStringWithId:", "valueToString", "Ljava.lang.String;", 0x9, "Lorg.json.JSONException;", NULL },
    { "wrapWithId:", "wrap", "Ljava.lang.Object;", 0x9, NULL, NULL },
    { "writeWithJavaIoWriter:", "write", "Ljava.io.Writer;", 0x1, "Lorg.json.JSONException;", NULL },
    { "writeValueWithJavaIoWriter:withId:withInt:withInt:", "writeValue", "Ljava.io.Writer;", 0x18, "Lorg.json.JSONException;Ljava.io.IOException;", NULL },
    { "indentWithJavaIoWriter:withInt:", "indent", "V", 0x18, "Ljava.io.IOException;", NULL },
    { "writeWithJavaIoWriter:withInt:withInt:", "write", "Ljava.io.Writer;", 0x0, "Lorg.json.JSONException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "map_", NULL, 0x12, "Ljava.util.Map;", NULL, NULL,  },
    { "NULL__", "NULL", 0x19, "Ljava.lang.Object;", &OrgJsonJSONObject_NULL__, NULL,  },
  };
  static const char *inner_classes[] = {"Lorg.json.JSONObject$Null;"};
  static const J2ObjcClassInfo _OrgJsonJSONObject = { 2, "JSONObject", "org.json", NULL, 0x1, 66, methods, 2, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgJsonJSONObject;
}

@end

void OrgJsonJSONObject_init(OrgJsonJSONObject *self) {
  (void) NSObject_init(self);
  self->map_ = new_JavaUtilHashMap_init();
}

OrgJsonJSONObject *new_OrgJsonJSONObject_init() {
  OrgJsonJSONObject *self = [OrgJsonJSONObject alloc];
  OrgJsonJSONObject_init(self);
  return self;
}

void OrgJsonJSONObject_initWithOrgJsonJSONObject_withNSStringArray_(OrgJsonJSONObject *self, OrgJsonJSONObject *jo, IOSObjectArray *names) {
  (void) OrgJsonJSONObject_init(self);
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(names))->size_; i += 1) {
    @try {
      (void) [self putOnceWithNSString:IOSObjectArray_Get(names, i) withId:[((OrgJsonJSONObject *) nil_chk(jo)) optWithNSString:IOSObjectArray_Get(names, i)]];
    }
    @catch (JavaLangException *ignore) {
    }
  }
}

OrgJsonJSONObject *new_OrgJsonJSONObject_initWithOrgJsonJSONObject_withNSStringArray_(OrgJsonJSONObject *jo, IOSObjectArray *names) {
  OrgJsonJSONObject *self = [OrgJsonJSONObject alloc];
  OrgJsonJSONObject_initWithOrgJsonJSONObject_withNSStringArray_(self, jo, names);
  return self;
}

void OrgJsonJSONObject_initWithOrgJsonJSONTokener_(OrgJsonJSONObject *self, OrgJsonJSONTokener *x) {
  (void) OrgJsonJSONObject_init(self);
  jchar c;
  NSString *key;
  if ([((OrgJsonJSONTokener *) nil_chk(x)) nextClean] != '{') {
    @throw [x syntaxErrorWithNSString:@"A JSONObject text must begin with '{'"];
  }
  for (; ; ) {
    c = [x nextClean];
    switch (c) {
      case 0:
      @throw [x syntaxErrorWithNSString:@"A JSONObject text must end with '}'"];
      case '}':
      return;
      default:
      [x back];
      key = [nil_chk([x nextValue]) description];
    }
    c = [x nextClean];
    if (c != ':') {
      @throw [x syntaxErrorWithNSString:@"Expected a ':' after a key"];
    }
    (void) [self putOnceWithNSString:key withId:[x nextValue]];
    switch ([x nextClean]) {
      case ';':
      case ',':
      if ([x nextClean] == '}') {
        return;
      }
      [x back];
      break;
      case '}':
      return;
      default:
      @throw [x syntaxErrorWithNSString:@"Expected a ',' or '}'"];
    }
  }
}

OrgJsonJSONObject *new_OrgJsonJSONObject_initWithOrgJsonJSONTokener_(OrgJsonJSONTokener *x) {
  OrgJsonJSONObject *self = [OrgJsonJSONObject alloc];
  OrgJsonJSONObject_initWithOrgJsonJSONTokener_(self, x);
  return self;
}

void OrgJsonJSONObject_initWithJavaUtilMap_(OrgJsonJSONObject *self, id<JavaUtilMap> map) {
  (void) NSObject_init(self);
  self->map_ = new_JavaUtilHashMap_init();
  if (map != nil) {
    id<JavaUtilIterator> i = [((id<JavaUtilSet>) nil_chk([map entrySet])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(i)) hasNext]) {
      id<JavaUtilMap_Entry> e = (id<JavaUtilMap_Entry>) check_protocol_cast([i next], @protocol(JavaUtilMap_Entry));
      id value = [((id<JavaUtilMap_Entry>) nil_chk(e)) getValue];
      if (value != nil) {
        (void) [self->map_ putWithId:[e getKey] withId:OrgJsonJSONObject_wrapWithId_(value)];
      }
    }
  }
}

OrgJsonJSONObject *new_OrgJsonJSONObject_initWithJavaUtilMap_(id<JavaUtilMap> map) {
  OrgJsonJSONObject *self = [OrgJsonJSONObject alloc];
  OrgJsonJSONObject_initWithJavaUtilMap_(self, map);
  return self;
}

void OrgJsonJSONObject_initWithId_(OrgJsonJSONObject *self, id bean) {
  (void) OrgJsonJSONObject_init(self);
  OrgJsonJSONObject_populateMapWithId_(self, bean);
}

OrgJsonJSONObject *new_OrgJsonJSONObject_initWithId_(id bean) {
  OrgJsonJSONObject *self = [OrgJsonJSONObject alloc];
  OrgJsonJSONObject_initWithId_(self, bean);
  return self;
}

void OrgJsonJSONObject_initWithId_withNSStringArray_(OrgJsonJSONObject *self, id object, IOSObjectArray *names) {
  (void) OrgJsonJSONObject_init(self);
  IOSClass *c = [nil_chk(object) getClass];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(names))->size_; i += 1) {
    NSString *name = IOSObjectArray_Get(names, i);
    @try {
      (void) [self putOptWithNSString:name withId:[((JavaLangReflectField *) nil_chk([c getField:name])) getWithId:object]];
    }
    @catch (JavaLangException *ignore) {
    }
  }
}

OrgJsonJSONObject *new_OrgJsonJSONObject_initWithId_withNSStringArray_(id object, IOSObjectArray *names) {
  OrgJsonJSONObject *self = [OrgJsonJSONObject alloc];
  OrgJsonJSONObject_initWithId_withNSStringArray_(self, object, names);
  return self;
}

void OrgJsonJSONObject_initWithNSString_(OrgJsonJSONObject *self, NSString *source) {
  (void) OrgJsonJSONObject_initWithOrgJsonJSONTokener_(self, new_OrgJsonJSONTokener_initWithNSString_(source));
}

OrgJsonJSONObject *new_OrgJsonJSONObject_initWithNSString_(NSString *source) {
  OrgJsonJSONObject *self = [OrgJsonJSONObject alloc];
  OrgJsonJSONObject_initWithNSString_(self, source);
  return self;
}

void OrgJsonJSONObject_initWithNSString_withJavaUtilLocale_(OrgJsonJSONObject *self, NSString *baseName, JavaUtilLocale *locale) {
  (void) OrgJsonJSONObject_init(self);
  JavaUtilResourceBundle *bundle = JavaUtilResourceBundle_getBundleWithNSString_withJavaUtilLocale_withJavaLangClassLoader_(baseName, locale, [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getContextClassLoader]);
  id<JavaUtilEnumeration> keys = [((JavaUtilResourceBundle *) nil_chk(bundle)) getKeys];
  while ([((id<JavaUtilEnumeration>) nil_chk(keys)) hasMoreElements]) {
    id key = [keys nextElement];
    if ([key isKindOfClass:[NSString class]]) {
      IOSObjectArray *path = [((NSString *) nil_chk(((NSString *) check_class_cast(key, [NSString class])))) split:@"\\."];
      jint last = ((IOSObjectArray *) nil_chk(path))->size_ - 1;
      OrgJsonJSONObject *target = self;
      for (jint i = 0; i < last; i += 1) {
        NSString *segment = IOSObjectArray_Get(path, i);
        OrgJsonJSONObject *nextTarget = [target optJSONObjectWithNSString:segment];
        if (nextTarget == nil) {
          nextTarget = new_OrgJsonJSONObject_init();
          (void) [target putWithNSString:segment withId:nextTarget];
        }
        target = nextTarget;
      }
      (void) [((OrgJsonJSONObject *) nil_chk(target)) putWithNSString:IOSObjectArray_Get(path, last) withId:[bundle getStringWithNSString:(NSString *) check_class_cast(key, [NSString class])]];
    }
  }
}

OrgJsonJSONObject *new_OrgJsonJSONObject_initWithNSString_withJavaUtilLocale_(NSString *baseName, JavaUtilLocale *locale) {
  OrgJsonJSONObject *self = [OrgJsonJSONObject alloc];
  OrgJsonJSONObject_initWithNSString_withJavaUtilLocale_(self, baseName, locale);
  return self;
}

NSString *OrgJsonJSONObject_doubleToStringWithDouble_(jdouble d) {
  OrgJsonJSONObject_initialize();
  if (JavaLangDouble_isInfiniteWithDouble_(d) || JavaLangDouble_isNaNWithDouble_(d)) {
    return @"null";
  }
  NSString *string = JavaLangDouble_toStringWithDouble_(d);
  if ([((NSString *) nil_chk(string)) indexOf:'.'] > 0 && [string indexOf:'e'] < 0 && [string indexOf:'E'] < 0) {
    while ([string hasSuffix:@"0"]) {
      string = [string substring:0 endIndex:((jint) [string length]) - 1];
    }
    if ([((NSString *) nil_chk(string)) hasSuffix:@"."]) {
      string = [string substring:0 endIndex:((jint) [string length]) - 1];
    }
  }
  return string;
}

IOSObjectArray *OrgJsonJSONObject_getNamesWithOrgJsonJSONObject_(OrgJsonJSONObject *jo) {
  OrgJsonJSONObject_initialize();
  jint length = [((OrgJsonJSONObject *) nil_chk(jo)) length];
  if (length == 0) {
    return nil;
  }
  id<JavaUtilIterator> iterator = [jo keys];
  IOSObjectArray *names = [IOSObjectArray newArrayWithLength:length type:NSString_class_()];
  jint i = 0;
  while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
    (void) IOSObjectArray_Set(names, i, (NSString *) check_class_cast([iterator next], [NSString class]));
    i += 1;
  }
  return names;
}

IOSObjectArray *OrgJsonJSONObject_getNamesWithId_(id object) {
  OrgJsonJSONObject_initialize();
  if (object == nil) {
    return nil;
  }
  IOSClass *klass = [nil_chk(object) getClass];
  IOSObjectArray *fields = [klass getFields];
  jint length = ((IOSObjectArray *) nil_chk(fields))->size_;
  if (length == 0) {
    return nil;
  }
  IOSObjectArray *names = [IOSObjectArray newArrayWithLength:length type:NSString_class_()];
  for (jint i = 0; i < length; i += 1) {
    (void) IOSObjectArray_Set(names, i, [((JavaLangReflectField *) nil_chk(IOSObjectArray_Get(fields, i))) getName]);
  }
  return names;
}

NSString *OrgJsonJSONObject_numberToStringWithNSNumber_(NSNumber *number) {
  OrgJsonJSONObject_initialize();
  if (number == nil) {
    @throw new_OrgJsonJSONException_initWithNSString_(@"Null pointer");
  }
  OrgJsonJSONObject_testValidityWithId_(number);
  NSString *string = [((NSNumber *) nil_chk(number)) description];
  if ([((NSString *) nil_chk(string)) indexOf:'.'] > 0 && [string indexOf:'e'] < 0 && [string indexOf:'E'] < 0) {
    while ([string hasSuffix:@"0"]) {
      string = [string substring:0 endIndex:((jint) [string length]) - 1];
    }
    if ([((NSString *) nil_chk(string)) hasSuffix:@"."]) {
      string = [string substring:0 endIndex:((jint) [string length]) - 1];
    }
  }
  return string;
}

void OrgJsonJSONObject_populateMapWithId_(OrgJsonJSONObject *self, id bean) {
  IOSClass *klass = [nil_chk(bean) getClass];
  jboolean includeSuperClass = [klass getClassLoader] != nil;
  IOSObjectArray *methods = includeSuperClass ? [klass getMethods] : [klass getDeclaredMethods];
  for (jint i = 0; i < methods->size_; i += 1) {
    @try {
      JavaLangReflectMethod *method = IOSObjectArray_Get(methods, i);
      if (JavaLangReflectModifier_isPublicWithInt_([((JavaLangReflectMethod *) nil_chk(method)) getModifiers])) {
        NSString *name = [method getName];
        NSString *key = @"";
        if ([((NSString *) nil_chk(name)) hasPrefix:@"get"]) {
          if ([@"getClass" isEqual:name] || [@"getDeclaringClass" isEqual:name]) {
            key = @"";
          }
          else {
            key = [name substring:3];
          }
        }
        else if ([name hasPrefix:@"is"]) {
          key = [name substring:2];
        }
        if (((jint) [((NSString *) nil_chk(key)) length]) > 0 && JavaLangCharacter_isUpperCaseWithChar_([key charAtWithInt:0]) && ((IOSObjectArray *) nil_chk([method getParameterTypes]))->size_ == 0) {
          if (((jint) [key length]) == 1) {
            key = [key lowercaseString];
          }
          else if (!JavaLangCharacter_isUpperCaseWithChar_([key charAtWithInt:1])) {
            key = JreStrcat("$$", [((NSString *) nil_chk([key substring:0 endIndex:1])) lowercaseString], [key substring:1]);
          }
          id result = [method invokeWithId:bean withNSObjectArray:nil];
          if (result != nil) {
            (void) [((id<JavaUtilMap>) nil_chk(self->map_)) putWithId:key withId:OrgJsonJSONObject_wrapWithId_(result)];
          }
        }
      }
    }
    @catch (JavaLangException *ignore) {
    }
  }
}

NSString *OrgJsonJSONObject_quoteWithNSString_(NSString *string) {
  OrgJsonJSONObject_initialize();
  JavaIoStringWriter *sw = new_JavaIoStringWriter_init();
  @synchronized([sw getBuffer]) {
    @try {
      return [((JavaIoWriter *) nil_chk(OrgJsonJSONObject_quoteWithNSString_withJavaIoWriter_(string, sw))) description];
    }
    @catch (JavaIoIOException *ignored) {
      return @"";
    }
  }
}

JavaIoWriter *OrgJsonJSONObject_quoteWithNSString_withJavaIoWriter_(NSString *string, JavaIoWriter *w) {
  OrgJsonJSONObject_initialize();
  if (string == nil || ((jint) [string length]) == 0) {
    [((JavaIoWriter *) nil_chk(w)) writeWithNSString:@"\"\""];
    return w;
  }
  jchar b;
  jchar c = 0;
  NSString *hhhh;
  jint i;
  jint len = ((jint) [((NSString *) nil_chk(string)) length]);
  [((JavaIoWriter *) nil_chk(w)) writeWithInt:'"'];
  for (i = 0; i < len; i += 1) {
    b = c;
    c = [string charAtWithInt:i];
    switch (c) {
      case '\\':
      case '"':
      [w writeWithInt:'\\'];
      [w writeWithInt:c];
      break;
      case '/':
      if (b == '<') {
        [w writeWithInt:'\\'];
      }
      [w writeWithInt:c];
      break;
      case 0x0008:
      [w writeWithNSString:@"\\b"];
      break;
      case 0x0009:
      [w writeWithNSString:@"\\t"];
      break;
      case 0x000a:
      [w writeWithNSString:@"\\n"];
      break;
      case 0x000c:
      [w writeWithNSString:@"\\f"];
      break;
      case 0x000d:
      [w writeWithNSString:@"\\r"];
      break;
      default:
      if (c < ' ' || (c >= 0x0080 && c < 0x00a0) || (c >= 0x2000 && c < 0x2100)) {
        [w writeWithNSString:@"\\u"];
        hhhh = JavaLangInteger_toHexStringWithInt_(c);
        [w writeWithNSString:@"0000" withInt:0 withInt:4 - ((jint) [((NSString *) nil_chk(hhhh)) length])];
        [w writeWithNSString:hhhh];
      }
      else {
        [w writeWithInt:c];
      }
    }
  }
  [w writeWithInt:'"'];
  return w;
}

id OrgJsonJSONObject_stringToValueWithNSString_(NSString *string) {
  OrgJsonJSONObject_initialize();
  JavaLangDouble *d;
  if ([((NSString *) nil_chk(string)) isEqual:@""]) {
    return string;
  }
  if ([string equalsIgnoreCase:@"true"]) {
    return JavaLangBoolean_get_TRUE__();
  }
  if ([string equalsIgnoreCase:@"false"]) {
    return JavaLangBoolean_get_FALSE__();
  }
  if ([string equalsIgnoreCase:@"null"]) {
    return OrgJsonJSONObject_NULL__;
  }
  jchar b = [string charAtWithInt:0];
  if ((b >= '0' && b <= '9') || b == '-') {
    @try {
      if ([string indexOf:'.'] > -1 || [string indexOf:'e'] > -1 || [string indexOf:'E'] > -1) {
        d = JavaLangDouble_valueOfWithNSString_(string);
        if (![d isInfinite] && ![d isNaN]) {
          return d;
        }
      }
      else {
        JavaLangLong *myLong = new_JavaLangLong_initWithNSString_(string);
        if ([string isEqual:[myLong description]]) {
          if ([myLong longLongValue] == [myLong intValue]) {
            return new_JavaLangInteger_initWithInt_([myLong intValue]);
          }
          else {
            return myLong;
          }
        }
      }
    }
    @catch (JavaLangException *ignore) {
    }
  }
  return string;
}

void OrgJsonJSONObject_testValidityWithId_(id o) {
  OrgJsonJSONObject_initialize();
  if (o != nil) {
    if ([o isKindOfClass:[JavaLangDouble class]]) {
      if ([((JavaLangDouble *) check_class_cast(o, [JavaLangDouble class])) isInfinite] || [((JavaLangDouble *) check_class_cast(o, [JavaLangDouble class])) isNaN]) {
        @throw new_OrgJsonJSONException_initWithNSString_(@"JSON does not allow non-finite numbers.");
      }
    }
    else if ([o isKindOfClass:[JavaLangFloat class]]) {
      if ([((JavaLangFloat *) check_class_cast(o, [JavaLangFloat class])) isInfinite] || [((JavaLangFloat *) check_class_cast(o, [JavaLangFloat class])) isNaN]) {
        @throw new_OrgJsonJSONException_initWithNSString_(@"JSON does not allow non-finite numbers.");
      }
    }
  }
}

NSString *OrgJsonJSONObject_valueToStringWithId_(id value) {
  OrgJsonJSONObject_initialize();
  if (value == nil || [value isEqual:nil]) {
    return @"null";
  }
  if ([OrgJsonJSONString_class_() isInstance:value]) {
    id object;
    @try {
      object = [((id<OrgJsonJSONString>) nil_chk(((id<OrgJsonJSONString>) check_protocol_cast(value, @protocol(OrgJsonJSONString))))) toJSONString];
    }
    @catch (JavaLangException *e) {
      @throw new_OrgJsonJSONException_initWithJavaLangThrowable_(e);
    }
    if ([object isKindOfClass:[NSString class]]) {
      return (NSString *) check_class_cast(object, [NSString class]);
    }
    @throw new_OrgJsonJSONException_initWithNSString_(JreStrcat("$@", @"Bad value from toJSONString: ", object));
  }
  if ([value isKindOfClass:[NSNumber class]]) {
    return OrgJsonJSONObject_numberToStringWithNSNumber_((NSNumber *) check_class_cast(value, [NSNumber class]));
  }
  if ([value isKindOfClass:[JavaLangBoolean class]] || [value isKindOfClass:[OrgJsonJSONObject class]] || [value isKindOfClass:[OrgJsonJSONArray class]]) {
    return [nil_chk(value) description];
  }
  if ([JavaUtilMap_class_() isInstance:value]) {
    return [new_OrgJsonJSONObject_initWithJavaUtilMap_((id<JavaUtilMap>) check_protocol_cast(value, @protocol(JavaUtilMap))) description];
  }
  if ([JavaUtilCollection_class_() isInstance:value]) {
    return [new_OrgJsonJSONArray_initWithJavaUtilCollection_((id<JavaUtilCollection>) check_protocol_cast(value, @protocol(JavaUtilCollection))) description];
  }
  if ([[nil_chk(value) getClass] isArray]) {
    return [new_OrgJsonJSONArray_initWithId_(value) description];
  }
  return OrgJsonJSONObject_quoteWithNSString_([value description]);
}

id OrgJsonJSONObject_wrapWithId_(id object) {
  OrgJsonJSONObject_initialize();
  @try {
    if (object == nil) {
      return OrgJsonJSONObject_NULL__;
    }
    if ([object isKindOfClass:[OrgJsonJSONObject class]] || [object isKindOfClass:[OrgJsonJSONArray class]] || [nil_chk(OrgJsonJSONObject_NULL__) isEqual:object] || [OrgJsonJSONString_class_() isInstance:object] || [object isKindOfClass:[JavaLangByte class]] || [object isKindOfClass:[JavaLangCharacter class]] || [object isKindOfClass:[JavaLangShort class]] || [object isKindOfClass:[JavaLangInteger class]] || [object isKindOfClass:[JavaLangLong class]] || [object isKindOfClass:[JavaLangBoolean class]] || [object isKindOfClass:[JavaLangFloat class]] || [object isKindOfClass:[JavaLangDouble class]] || [object isKindOfClass:[NSString class]]) {
      return object;
    }
    if ([JavaUtilCollection_class_() isInstance:object]) {
      return new_OrgJsonJSONArray_initWithJavaUtilCollection_((id<JavaUtilCollection>) check_protocol_cast(object, @protocol(JavaUtilCollection)));
    }
    if ([[nil_chk(object) getClass] isArray]) {
      return new_OrgJsonJSONArray_initWithId_(object);
    }
    if ([JavaUtilMap_class_() isInstance:object]) {
      return new_OrgJsonJSONObject_initWithJavaUtilMap_((id<JavaUtilMap>) check_protocol_cast(object, @protocol(JavaUtilMap)));
    }
    JavaLangPackage *objectPackage = [[object getClass] getPackage];
    NSString *objectPackageName = objectPackage != nil ? [objectPackage getName] : @"";
    if ([objectPackageName hasPrefix:@"java."] || [objectPackageName hasPrefix:@"javax."] || [[object getClass] getClassLoader] == nil) {
      return [object description];
    }
    return new_OrgJsonJSONObject_initWithId_(object);
  }
  @catch (JavaLangException *exception) {
    return nil;
  }
}

JavaIoWriter *OrgJsonJSONObject_writeValueWithJavaIoWriter_withId_withInt_withInt_(JavaIoWriter *writer, id value, jint indentFactor, jint indent) {
  OrgJsonJSONObject_initialize();
  if (value == nil || [value isEqual:nil]) {
    [((JavaIoWriter *) nil_chk(writer)) writeWithNSString:@"null"];
  }
  else if ([value isKindOfClass:[OrgJsonJSONObject class]]) {
    (void) [((OrgJsonJSONObject *) check_class_cast(value, [OrgJsonJSONObject class])) writeWithJavaIoWriter:writer withInt:indentFactor withInt:indent];
  }
  else if ([value isKindOfClass:[OrgJsonJSONArray class]]) {
    (void) [((OrgJsonJSONArray *) check_class_cast(value, [OrgJsonJSONArray class])) writeWithJavaIoWriter:writer withInt:indentFactor withInt:indent];
  }
  else if ([JavaUtilMap_class_() isInstance:value]) {
    (void) [new_OrgJsonJSONObject_initWithJavaUtilMap_((id<JavaUtilMap>) check_protocol_cast(value, @protocol(JavaUtilMap))) writeWithJavaIoWriter:writer withInt:indentFactor withInt:indent];
  }
  else if ([JavaUtilCollection_class_() isInstance:value]) {
    (void) [new_OrgJsonJSONArray_initWithJavaUtilCollection_((id<JavaUtilCollection>) check_protocol_cast(value, @protocol(JavaUtilCollection))) writeWithJavaIoWriter:writer withInt:indentFactor withInt:indent];
  }
  else if ([[value getClass] isArray]) {
    (void) [new_OrgJsonJSONArray_initWithId_(value) writeWithJavaIoWriter:writer withInt:indentFactor withInt:indent];
  }
  else if ([value isKindOfClass:[NSNumber class]]) {
    [((JavaIoWriter *) nil_chk(writer)) writeWithNSString:OrgJsonJSONObject_numberToStringWithNSNumber_((NSNumber *) check_class_cast(value, [NSNumber class]))];
  }
  else if ([value isKindOfClass:[JavaLangBoolean class]]) {
    [((JavaIoWriter *) nil_chk(writer)) writeWithNSString:[value description]];
  }
  else if ([OrgJsonJSONString_class_() isInstance:value]) {
    id o;
    @try {
      o = [((id<OrgJsonJSONString>) check_protocol_cast(value, @protocol(OrgJsonJSONString))) toJSONString];
    }
    @catch (JavaLangException *e) {
      @throw new_OrgJsonJSONException_initWithJavaLangThrowable_(e);
    }
    [((JavaIoWriter *) nil_chk(writer)) writeWithNSString:o != nil ? [o description] : OrgJsonJSONObject_quoteWithNSString_([value description])];
  }
  else {
    (void) OrgJsonJSONObject_quoteWithNSString_withJavaIoWriter_([value description], writer);
  }
  return writer;
}

void OrgJsonJSONObject_indentWithJavaIoWriter_withInt_(JavaIoWriter *writer, jint indent) {
  OrgJsonJSONObject_initialize();
  for (jint i = 0; i < indent; i += 1) {
    [((JavaIoWriter *) nil_chk(writer)) writeWithInt:' '];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsonJSONObject)

@implementation OrgJsonJSONObject_Null

- (id)clone {
  return self;
}

- (jboolean)isEqual:(id)object {
  return object == nil || object == self;
}

- (NSString *)description {
  return @"null";
}

- (instancetype)init {
  OrgJsonJSONObject_Null_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "clone", NULL, "Ljava.lang.Object;", 0x14, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgJsonJSONObject_Null = { 2, "Null", "org.json", "JSONObject", 0x1a, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgJsonJSONObject_Null;
}

@end

void OrgJsonJSONObject_Null_init(OrgJsonJSONObject_Null *self) {
  (void) NSObject_init(self);
}

OrgJsonJSONObject_Null *new_OrgJsonJSONObject_Null_init() {
  OrgJsonJSONObject_Null *self = [OrgJsonJSONObject_Null alloc];
  OrgJsonJSONObject_Null_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsonJSONObject_Null)
